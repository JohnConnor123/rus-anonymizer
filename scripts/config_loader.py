#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
from typing import Dict, Any, Optional
from pathlib import Path


class ConfigLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self, config_file: str = "config.env"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_file = config_file
        self.config = {}
        self._load_config()
    
    def _load_config(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        config_path = Path(self.config_file)
        
        if not config_path.exists():
            raise FileNotFoundError(
                f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        with open(config_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not line or line.startswith('#'):
                    continue
                
                # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ KEY=VALUE
                if '=' in line:
                    key, value = line.split('=', 1)
                    # –£–¥–∞–ª—è–µ–º inline –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ #, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if '#' in value:
                        value = value.split('#', 1)[0]
                    self.config[key.strip()] = value.strip()
    
    def get(self, key: str, default: Any = None) -> Any:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        return self.config.get(key, default)
    
    def get_int(self, key: str, default: int = 0) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        value = self.get(key, default)
        try:
            return int(value)
        except (ValueError, TypeError):
            return default
    
    def get_bool(self, key: str, default: bool = False) -> bool:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        value = self.get(key, default)
        if isinstance(value, str):
            return value.lower() in ('true', '1', 'yes', 'on')
        return bool(value)
    
    def get_str(self, key: str, default: str = "") -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            key: –ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        value = self.get(key, default)
        if value == "" or value is None:
            return default
        return str(value)
    
    def print_config(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("üîß –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        for key, value in self.config.items():
            # –°–∫—Ä—ã–≤–∞–µ–º API –∫–ª—é—á–∏
            if 'key' in key.lower() or 'token' in key.lower():
                display_value = "***—Å–∫—Ä—ã—Ç–æ***" if value else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            else:
                display_value = value
            print(f"   {key}: {display_value}")


def load_dataset_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.env"""
    
    loader = ConfigLoader()
    
    config = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        'total_dialogs': loader.get_int('TOTAL_DIALOGS', 100),
        'max_batch_size': loader.get_int('MAX_BATCH_SIZE', 20),
        'output_file': loader.get_str('OUTPUT_FILE', None),
        
        # OpenAI API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        'api_key': loader.get_str('OPENAI_API_KEY'),
        'model': loader.get_str('MODEL', 'meta-llama/llama-4-maverick'),
        'base_url': loader.get_str('OPENAI_BASE_URL', None),
        
        # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
        'preview_config': loader.get_bool('PREVIEW_CONFIG', False),
        'dry_run': loader.get_bool('DRY_RUN', False),
        'async_generation': loader.get_bool('ASYNC_GENERATION', True),
        'max_concurrency': loader.get_int('MAX_CONCURRENCY', 3)
    }
    
    return config 