#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç—ã
"""
import json
from pathlib import Path
from collections import Counter, defaultdict
from typing import Dict, List, Any


def load_dataset(path: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞."""
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    
    if isinstance(data, list):
        return data
    return data.get("dialogs", [])


def analyze_annotation_quality(original_path: str, annotated_path: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏."""
    original = load_dataset(original_path)
    annotated = load_dataset(annotated_path)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    original_dict = {dlg["id"]: dlg for dlg in original}
    
    stats = {
        "total_dialogs": len(annotated),
        "annotated_dialogs": 0,
        "text_changes": 0,
        "position_errors": 0,
        "has_pd_changes": {"false_to_true": 0, "true_to_false": 0},
        "entity_types": Counter(),
        "quality_issues": []
    }
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏...")
    print("=" * 50)
    
    for ann_dlg in annotated:
        dlg_id = ann_dlg.get("id")
        orig_dlg = original_dict.get(dlg_id)
        
        if not orig_dlg:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        if orig_dlg.get("text") != ann_dlg.get("text"):
            stats["text_changes"] += 1
            stats["quality_issues"].append(f"–î–∏–∞–ª–æ–≥ {dlg_id}: –∏–∑–º–µ–Ω—ë–Ω —Ç–µ–∫—Å—Ç")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ entities
        text = ann_dlg.get("text", "")
        for entity in ann_dlg.get("entities", []):
            start, end = entity.get("start", 0), entity.get("end", 0)
            entity_text = entity.get("text", "")
            entity_type = entity.get("type", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            if start < 0 or end > len(text) or start >= end:
                stats["position_errors"] += 1
                stats["quality_issues"].append(f"–î–∏–∞–ª–æ–≥ {dlg_id}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ {start}-{end}")
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞
            actual_text = text[start:end]
            if actual_text != entity_text:
                stats["position_errors"] += 1
                stats["quality_issues"].append(f"–î–∏–∞–ª–æ–≥ {dlg_id}: —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç '{entity_text}' != '{actual_text}'")
                continue
                
            # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã
            stats["entity_types"][entity_type] += 1
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è has_pd
        orig_has_pd = orig_dlg.get("has_pd", False)
        ann_has_pd = ann_dlg.get("has_pd", False)
        
        if orig_has_pd != ann_has_pd:
            if not orig_has_pd and ann_has_pd:
                stats["has_pd_changes"]["false_to_true"] += 1
            elif orig_has_pd and not ann_has_pd:
                stats["has_pd_changes"]["true_to_false"] += 1
                
        # –°—á–∏—Ç–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if ann_dlg.get("entities"):
            stats["annotated_dialogs"] += 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats['total_dialogs']}")
    print(f"  ‚Ä¢ –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats['annotated_dialogs']} ({stats['annotated_dialogs']/stats['total_dialogs']*100:.1f}%)")
    print()
    
    print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞:")
    print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {stats['text_changes']}")
    print(f"  ‚Ä¢ –û—à–∏–±–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {stats['position_errors']}")
    print()
    
    print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è has_pd:")
    print(f"  ‚Ä¢ false ‚Üí true: {stats['has_pd_changes']['false_to_true']}")
    print(f"  ‚Ä¢ true ‚Üí false: {stats['has_pd_changes']['true_to_false']}")
    print()
    
    print(f"üè∑Ô∏è  –¢–∏–ø—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π:")
    for entity_type, count in stats["entity_types"].most_common():
        print(f"  ‚Ä¢ {entity_type}: {count}")
    print()
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    total_issues = stats["text_changes"] + stats["position_errors"]
    if total_issues == 0:
        quality = "–û–¢–õ–ò–ß–ù–û–ï"
    elif total_issues < 5:
        quality = "–•–û–†–û–®–ï–ï"
    elif total_issues < 20:
        quality = "–°–†–ï–î–ù–ï–ï"
    else:
        quality = "–ü–õ–û–•–û–ï"
        
    print(f"‚úÖ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if stats["quality_issues"]:
        print(f"\n‚ùå –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–±–ª–µ–º:")
        for issue in stats["quality_issues"][:10]:
            print(f"  ‚Ä¢ {issue}")
    
    return stats


def main():
    import sys
    
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_annotation_quality.py <–∏—Å—Ö–æ–¥–Ω—ã–π_–¥–∞—Ç–∞—Å–µ—Ç> <–∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_–¥–∞—Ç–∞—Å–µ—Ç>")
        sys.exit(1)
        
    original_path = sys.argv[1]
    annotated_path = sys.argv[2]
    
    if not Path(original_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {original_path}")
        sys.exit(1)
        
    if not Path(annotated_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {annotated_path}")
        sys.exit(1)
    
    analyze_annotation_quality(original_path, annotated_path)


if __name__ == "__main__":
    main() 