#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è DeepPavlov –º–æ–¥–µ–ª–µ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ —É–º–Ω—É—é –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π.
"""

import json
import time
import sys
from pathlib import Path
from typing import Dict, List, Tuple, Any, Set

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from anonymizers.deeppavlov_ner.deeppavlov_anonymizer import DeepPavlovAnonymizer
    DEEPPAVLOV_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå DeepPavlov –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    DEEPPAVLOV_AVAILABLE = False


def load_test_dataset(filename: str = "test_dataset.json") -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç."""
    test_file = project_root / "tests" / filename
    
    try:
        with open(test_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []


def entities_overlap(entity1: Tuple[int, int, str], entity2: Tuple[int, int, str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è –ª–∏ –¥–≤–µ —Å—É—â–Ω–æ—Å—Ç–∏."""
    start1, end1, type1 = entity1
    start2, end2, type2 = entity2
    
    # –¢–∏–ø—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
    if type1 != type2:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    return not (end1 <= start2 or end2 <= start1)


def calculate_overlap_score(entity1: Tuple[int, int, str], entity2: Tuple[int, int, str]) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–µ–ø–µ–Ω—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –¥–≤—É—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (0.0 - 1.0)."""
    start1, end1, type1 = entity1
    start2, end2, type2 = entity2
    
    if type1 != type2:
        return 0.0
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    overlap_start = max(start1, start2)
    overlap_end = min(end1, end2)
    
    if overlap_start >= overlap_end:
        return 0.0
    
    overlap_length = overlap_end - overlap_start
    union_length = max(end1, end2) - min(start1, start2)
    
    return overlap_length / union_length if union_length > 0 else 0.0


def merge_person_entities(entities: List[Tuple[int, int, str, str]]) -> List[Tuple[int, int, str, str]]:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ PERSON –≤ –æ–¥–Ω—É."""
    if not entities:
        return entities
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    sorted_entities = sorted(entities, key=lambda x: x[0])
    merged = []
    
    i = 0
    while i < len(sorted_entities):
        start, end, entity_type, value = sorted_entities[i]
        
        if entity_type == 'PERSON':
            # –ò—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ PERSON —Å—É—â–Ω–æ—Å—Ç–∏
            merged_start = start
            merged_end = end
            merged_value = value
            
            j = i + 1
            while j < len(sorted_entities):
                next_start, next_end, next_type, next_value = sorted_entities[j]
                
                # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Ç–æ–∂–µ PERSON –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤)
                if (next_type == 'PERSON' and 
                    next_start <= merged_end + 3):  # +3 –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–±–µ–ª–æ–≤
                    merged_end = next_end
                    merged_value = merged_value + " " + next_value if not merged_value.endswith(next_value) else merged_value
                    j += 1
                else:
                    break
            
            merged.append((merged_start, merged_end, entity_type, merged_value.strip()))
            i = j
        else:
            merged.append((start, end, entity_type, value))
            i += 1
    
    return merged


def improve_age_entities(entities: List[Tuple[int, int, str, str]], text: str) -> List[Tuple[int, int, str, str]]:
    """–£–ª—É—á—à–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ - —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞."""
    improved = []
    
    for start, end, entity_type, value in entities:
        if entity_type == 'AGE':
            # –ò—â–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ
            import re
            age_match = re.search(r'\d+\s*–ª–µ—Ç', value)
            if age_match:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —á–∏—Å–ª–æ–≤–æ–π —á–∞—Å—Ç–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                age_text = age_match.group()
                age_start = text.find(age_text, start)
                if age_start != -1:
                    age_end = age_start + len(age_text)
                    improved.append((age_start, age_end, entity_type, age_text))
                    continue
        
        improved.append((start, end, entity_type, value))
    
    return improved


def smart_entity_matching(true_entities: List[Dict], found_entities: List[Tuple[int, int, str, str]], 
                         text: str, overlap_threshold: float = 0.3) -> Tuple[int, int, int]:
    """
    –£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –≤—Å–µ–≥–æ_–∏—Å—Ç–∏–Ω–Ω—ã—Ö, –≤—Å–µ–≥–æ_–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö).
    """
    # –£–ª—É—á—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    found_entities = merge_person_entities(found_entities)
    found_entities = improve_age_entities(found_entities, text)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    true_set = [(e['start'], e['end'], e['type']) for e in true_entities]
    found_set = [(start, end, entity_type) for start, end, entity_type, _ in found_entities]
    
    matched_true = set()
    matched_found = set()
    
    # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    exact_matches = set(true_set) & set(found_set)
    matched_true.update(exact_matches)
    matched_found.update(exact_matches)
    
    # –ò—â–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –¥–ª—è –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö
    remaining_true = [e for e in true_set if e not in matched_true]
    remaining_found = [e for e in found_set if e not in matched_found]
    
    for true_entity in remaining_true:
        best_match = None
        best_score = 0.0
        
        for found_entity in remaining_found:
            if found_entity in matched_found:
                continue
                
            score = calculate_overlap_score(true_entity, found_entity)
            if score > best_score and score >= overlap_threshold:
                best_score = score
                best_match = found_entity
        
        if best_match:
            matched_true.add(true_entity)
            matched_found.add(best_match)
    
    return len(matched_true), len(true_entities), len(found_entities)


def analyze_deeppavlov_improved():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã DeepPavlov."""
    if not DEEPPAVLOV_AVAILABLE:
        print("‚ùå DeepPavlov –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print("üß† –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è DeepPavlov NER")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = load_test_dataset()
    if not test_data:
        print("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_data)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ç–æ—Ä
    print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepPavlov...")
    start_init = time.time()
    
    try:
        anonymizer = DeepPavlovAnonymizer(aggressiveness=0.8)
        init_time = time.time() - start_init
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {init_time:.2f}—Å")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä
    total_correct = 0
    total_true = 0
    total_found = 0
    
    for i, example in enumerate(test_data, 1):
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä {i}/{len(test_data)}")
        print(f"–¢–µ–∫—Å—Ç: {example['text']}")
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
        true_entities = example['entities']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        start_time = time.time()
        try:
            extracted = anonymizer.extract_entities(example['text'])
            process_time = time.time() - start_time
            
            # –£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            correct, true_count, found_count = smart_entity_matching(
                true_entities, extracted, example['text']
            )
            
            total_correct += correct
            total_true += true_count
            total_found += found_count
            
            print(f"–û–∂–∏–¥–∞–µ–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ ({true_count}):")
            for entity in true_entities:
                text_part = example['text'][entity['start']:entity['end']]
                print(f"  - {entity['type']}: '{text_part}' [{entity['start']}:{entity['end']}]")
            
            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ ({found_count}) –∑–∞ {process_time*1000:.1f}–º—Å:")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
            improved_entities = merge_person_entities(extracted)
            improved_entities = improve_age_entities(improved_entities, example['text'])
            
            for start, end, entity_type, value in improved_entities:
                print(f"  - {entity_type}: '{value}' [{start}:{end}]")
            
            accuracy = correct / true_count if true_count > 0 else 0
            print(f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {correct}/{true_count} (—Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy*100:.1f}%)")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            continue
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    precision = total_correct / total_found if total_found > 0 else 0
    recall = total_correct / total_true if total_true > 0 else 0
    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0
    
    print(f"–í—Å–µ–≥–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π: {total_true}")
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π: {total_found}")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö: {total_correct}")
    print(f"")
    print(f"üéØ Precision: {precision:.3f} ({precision*100:.1f}%)")
    print(f"üéØ Recall: {recall:.3f} ({recall*100:.1f}%)")
    print(f"üéØ F1-Score: {f1:.3f} ({f1*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print(f"\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨")
    print(f"–í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_time:.2f}—Å")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ—Ä: {(time.time() - start_init - init_time) / len(test_data) * 1000:.1f}–º—Å")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è DeepPavlov –º–æ–¥–µ–ª–µ–π")
    print("=" * 50)
    
    analyze_deeppavlov_improved()


if __name__ == "__main__":
    main() 