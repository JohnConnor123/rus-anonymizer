#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ü–î —á–µ—Ä–µ–∑ OpenAI API
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ config.env
"""

import os
import sys
from datetime import datetime
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –º–æ–¥—É–ª–µ–π –≤ –ø–∞–ø–∫–µ scripts
from scripts.dataset_openai_generator import OpenAIDatasetGenerator
from scripts.dataset_config import sample_random_config
from scripts.config_loader import load_dataset_config, ConfigLoader


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
        config = load_dataset_config()
        loader = ConfigLoader()
        
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return 1
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if config['preview_config']:
        print("üé≤ –ü—Ä–∏–º–µ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for i in range(3):
            sample_config = sample_random_config()
            print(f"\n  –í–∞—Ä–∏–∞–Ω—Ç {i+1}:")
            for key, value in sample_config.items():
                print(f"    {key}: {value}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not config['api_key'] or config['api_key'] == 'your-api-key-here':
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω OpenAI API –∫–ª—é—á!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π OPENAI_API_KEY –≤ —Ñ–∞–π–ª–µ config.env")
        return 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if config['output_file']:
        output_file = config['output_file']
    else:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"data/generated/dataset_{timestamp}.json"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    Path(output_file).parent.mkdir(parents=True, exist_ok=True)
    
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ü–î")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    loader.print_config()
    
    print(f"\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print(f"   –î–∏–∞–ª–æ–≥–æ–≤: {config['total_dialogs']}")
    print(f"   –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏: {config['max_batch_size']}")
    print(f"   –ú–æ–¥–µ–ª—å: {config['model']}")
    print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    print(f"   API –∫–ª—é—á: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config['api_key'] else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    if config['dry_run']:
        print("\nüîç –≠—Ç–æ –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –ø–∞—á–µ–∫
        from scripts.dataset_config import generate_batch_configs
        batch_configs = generate_batch_configs(
            config['total_dialogs'], 
            config['max_batch_size']
        )
        
        print(f"\nüì¶ –ü–ª–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({len(batch_configs)} –ø–∞—á–µ–∫):")
        for i, batch_config in enumerate(batch_configs):
            print(f"   –ü–∞—á–∫–∞ {i+1}: {batch_config['batch_size']} –¥–∏–∞–ª–æ–≥–æ–≤")
            print(f"     –°—Ñ–µ—Ä–∞: {batch_config['business_sphere']}")
            print(f"     –†–µ–≥–∏–æ–Ω: {batch_config['regional_focus']}")
            print(f"     –°—Ç–∏–ª—å: {batch_config['communication_style']}")
            print(f"     –ö–∞—á–µ—Å—Ç–≤–æ: {batch_config['transcription_quality']}")
            print(f"     –ü–î: {batch_config['pd_percentage']}%")
            print()
            
        return 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    try:
        print("\nüéØ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        
        generator = OpenAIDatasetGenerator(
            api_key=config['api_key'], 
            model=config['model'],
            base_url=config.get('base_url')
        )
        
        if config.get('async_generation', True):
            import asyncio
            stats = asyncio.run(
                generator.generate_dataset_async(
                    total_dialogs=config['total_dialogs'],
                    max_batch_size=config['max_batch_size'],
                    save_path=output_file,
                    max_concurrency=config.get('max_concurrency', 3)
                )
            )
        else:
            stats = generator.generate_dataset(
                total_dialogs=config['total_dialogs'],
                max_batch_size=config['max_batch_size'],
                save_path=output_file
            )
        
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 50)
        print(f"üìÑ –§–∞–π–ª: {stats['save_path']}")
        print(f"üìä –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats['total_dialogs']}")
        print(f"‚úÖ –° –ü–î: {stats['with_pd']} ({stats['with_pd']/stats['total_dialogs']*100:.1f}%)")
        print(f"üìù –ë–µ–∑ –ü–î: {stats['without_pd']} ({stats['without_pd']/stats['total_dialogs']*100:.1f}%)")
        print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_cost_tokens']:,}")
        
        if stats['sphere_distribution']:
            print(f"\nüè¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ñ–µ—Ä–∞–º:")
            for sphere, count in stats['sphere_distribution'].items():
                print(f"   {sphere}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        try:
            import json
            with open(stats['save_path'], 'r', encoding='utf-8') as f:
                dataset = json.load(f)
                
            dialogs = dataset.get('dialogs', [])
            if dialogs:
                print(f"\nüìù –ü–†–ò–ú–ï–† –î–ò–ê–õ–û–ì–ê:")
                sample = dialogs[0]
                print(f"   ID: {sample['id']}")
                print(f"   –ü–î: {'–î–∞' if sample['has_pd'] else '–ù–µ—Ç'}")
                print(f"   –°—É—â–Ω–æ—Å—Ç–µ–π: {len(sample['entities'])}")
                print(f"   –¢–µ–∫—Å—Ç: {sample['text'][:200]}...")
                
                if sample['entities']:
                    print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")
                    for entity in sample['entities'][:3]:  # –ü–µ—Ä–≤—ã–µ 3
                        print(f"     - {entity['type']}: '{entity['text']}'")
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä: {e}")
        
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return 1


if __name__ == "__main__":
    exit(main()) 